import{_ as a,o as e,c as t,a as d}from"./index-45acc1b5.js";const o="/assets/orbits_demo-31dba9c1.webm",s="/assets/bullets_demo-034860e8.webm",r="/assets/opengl_demo-82065403.webm";const i={},n={class:"view-container"},p=d('<h1 data-v-95311df7>C++ Projects</h1><p data-v-95311df7>Here are some demos I have made in C++.</p><p data-v-95311df7>I learned how to program by reading <a href="https://www.stroustrup.com/4th.html" data-v-95311df7>&quot;The C++ Programming Language&quot;</a> by Bjarne Stroustrup</p><br data-v-95311df7><div class="video-post" data-v-95311df7><h2 data-v-95311df7>Orbiting planets</h2><div class="row" data-v-95311df7><video muted autoplay loop controls src="'+o+'" data-v-95311df7></video><div class="text-container" data-v-95311df7><p data-v-95311df7>After having read and done the exercises from the book, this was my first C++ project.</p><p data-v-95311df7>I checked some examples from <a href="https://www.raylib.com/examples.html" data-v-95311df7>Raylib</a> and then came up with this idea.</p><p data-v-95311df7>It has a main game loop, where the input processing, game update and drawing of objects are done separately.</p><p data-v-95311df7>Making the trails was a bit challenging since I didn&#39;t want to make any memory leaks.</p><br data-v-95311df7><br data-v-95311df7><p data-v-95311df7><a href="https://github.com/Forka137/orbiting-planets" data-v-95311df7>Code on Github</a></p></div></div></div><div class="video-post" data-v-95311df7><h2 data-v-95311df7>Bullet generator</h2><div class="row" data-v-95311df7><video muted autoplay loop controls src="'+s+'" data-v-95311df7></video><div class="text-container" data-v-95311df7><p data-v-95311df7>For this one I was inspired in the bullet system used in Touhou games. I also wanted to learn how to load assets.</p><p data-v-95311df7>The structure of the code is very similar to the orbiting planets. Every bullet deallocates its memory after leaving the screen.</p><p data-v-95311df7>The code allows to add easily more bullet patterns just by creating a new class with the pattern.</p><p data-v-95311df7>If you press the R you can spam thousands of bullets very quickly.</p><br data-v-95311df7><br data-v-95311df7><p data-v-95311df7><a href="https://github.com/Forka137/bullet-generator" data-v-95311df7>Code on Github</a></p></div></div></div><div class="video-post" data-v-95311df7><h2 data-v-95311df7>OpenGL demo</h2><div class="row" data-v-95311df7><video muted autoplay loop controls src="'+r+'" data-v-95311df7></video><div class="text-container" data-v-95311df7><p data-v-95311df7>I was studying in parallel the book from <a href="https://learnopengl.com" data-v-95311df7>&quot;Learn OpenGL&quot;</a>. I had to learn about the rendering pipeline and shaders (GLSL).</p><p data-v-95311df7>I was able to understand the view frustum, matrix transformations, and even the problems of rotation in 3D space (Euler angles).</p><p data-v-95311df7>In the demo you can see a demo of 3D space, where there are 10 boxes being rendered. You move around with the WASD keys and the mouse.</p><p data-v-95311df7>There was an excercise in the book that required you to change the opacity of a texture using an &quot;uniform&quot; variable that is inside the shader. That&#39;s the frog texture you see at the end.</p><br data-v-95311df7><br data-v-95311df7><p data-v-95311df7><a href="https://github.com/Forka137/opengl-boxes" data-v-95311df7>Code on Github</a></p></div></div></div>',7),v=[p];function h(l,c){return e(),t("div",n,v)}const u=a(i,[["render",h],["__scopeId","data-v-95311df7"]]);export{u as default};
